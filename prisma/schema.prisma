// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("APP_DATABASE_URL")
}

// Tournaments

enum StatsPublished {
    NOW
    AFTER
    NEVER
}

model Tournament {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name           String
    slug           String         @unique
    startDate      DateTime
    endDate        DateTime
    description    String
    publishedAt    DateTime?
    statsPublished StatsPublished

    teams  Team[]
    groups Group[]
}

// Players

model Player {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String  @default("")
    photo       String?

    teams           Team[]
    playerPositions PlayerPosition[]
    goals           Goal[]
}

// Teams

model Team {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    abbrev      String
    description String @default("")

    tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId String
    players      Player[]
    group        GroupTeam?
    macthes      MatchTeam[]

    @@unique([abbrev, tournamentId])
}

// Groups

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    slug        String
    description String @default("")

    tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId String
    teams        GroupTeam[]

    @@unique([slug, tournamentId])
}

model GroupTeam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    standing Int?

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String
    team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId  String @unique

    @@unique([groupId, standing])
}

// Matches

model Match {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    expectedStart DateTime?
    playfoffLayer Int?

    teams MatchTeam[]
    games MatchGame[]
}

enum MatchTeamType {
    HOME
    VISITING
}

model MatchTeam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type MatchTeamType

    team    Team   @relation(fields: [teamId], references: [id])
    teamId  String
    match   Match  @relation(fields: [matchId], references: [id])
    matchId String
}

enum TeamColor {
    BLUE
    WHITE
}

model MatchGame {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startedAt     DateTime  @default(now())
    finishedAt    DateTime?
    homeTeamColor TeamColor

    match           Match            @relation(fields: [matchId], references: [id])
    matchId         String
    playerPositions PlayerPosition[]
}

model Goal {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    timestamp DateTime @default(now())
    own       Boolean

    player   Player @relation(fields: [playerId], references: [id])
    playerId String
}

enum PlayerPositionType {
    STRIKER
    DEFENDER
}

model PlayerPosition {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type      PlayerPositionType
    timestamp DateTime           @default(now())

    player      Player    @relation(fields: [playerId], references: [id])
    playerId    String
    game        MatchGame @relation(fields: [matchGameId], references: [id])
    matchGameId String
}
