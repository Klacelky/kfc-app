// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("APP_DATABASE_URL")
}

// Admin users

model AdminUser {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username String  @unique
    password String
    su       Boolean
}

// Tournaments

enum StatsPublished {
    NOW
    AFTER
    NEVER
}

model Tournament {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name           String
    slug           String         @unique
    startDate      DateTime
    endDate        DateTime
    description    String
    publishedAt    DateTime?
    statsPublished StatsPublished

    teams  Team[]
    groups Group[]
}

// Players

model Player {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String  @default("")
    photo       String?

    teams           Team[]
    playerPositions PlayerPosition[]
    goals           Goal[]
}

// Teams

model Team {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    abbrev      String
    description String @default("")

    tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId String
    players      Player[]
    group        GroupTeam?
    macthes      MatchTeam[]

    @@unique([abbrev, tournamentId])
}

// Groups

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    slug        String
    description String @default("")

    tournament        Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId      String
    teams             GroupTeam[]
    successiveMatches TeamSource[]

    @@unique([slug, tournamentId])
}

model GroupTeam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    standing Int?

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String
    team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId  String @unique

    @@unique([groupId, standing])
}

// Matches

model Match {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    expectedStart DateTime?
    playoffLayer  Int?

    teams             MatchTeam[]
    games             MatchGame[]
    successiveMatches TeamSource[] @relation(name: "successiveMatches")
    teamSources       TeamSource[] @relation(name: "teamSources")
}

enum MatchTeamType {
    HOME
    VISITING
}

model TeamSource {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type     MatchTeamType
    standing Int?
    winner   Boolean?

    sourceGroup   Group?  @relation(fields: [sourceGroupId], references: [id], onDelete: Cascade)
    sourceGroupId String?
    sourceMatch   Match?  @relation(name: "successiveMatches", fields: [sourceMatchId], references: [id], onDelete: Cascade)
    sourceMatchId String?
    match         Match   @relation(name: "teamSources", fields: [matchId], references: [id], onDelete: Cascade)
    matchId       String

    @@unique([matchId, type])
}

model MatchTeam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type MatchTeamType

    team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId  String
    match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
    matchId String

    @@unique([type, matchId])
    @@unique([teamId, matchId])
}

enum TeamColor {
    BLUE
    WHITE
}

model MatchGame {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startedAt     DateTime  @default(now())
    finishedAt    DateTime?
    homeTeamColor TeamColor

    match           Match             @relation(fields: [matchId], references: [id], onDelete: Cascade)
    matchId         String
    playerPositions PlayerPositions[]
    goals           Goal[]
}

model Goal {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    timestamp DateTime @default(now())
    own       Boolean
    photo     Boolean
    out       Boolean

    game     MatchGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId   String
    player   Player    @relation(fields: [playerId], references: [id], onDelete: Restrict)
    playerId String
}

model PlayerPositions {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    timestamp DateTime @default(now())

    game    MatchGame        @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId  String
    players PlayerPosition[]
}

enum PlayerPositionType {
    STRIKER
    DEFENDER
}

model PlayerPosition {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type PlayerPositionType

    player            Player          @relation(fields: [playerId], references: [id], onDelete: Restrict)
    playerId          String
    playerPositions   PlayerPositions @relation(fields: [playerPositionsId], references: [id], onDelete: Cascade)
    playerPositionsId String

    @@unique([playerPositionsId, playerId])
}
