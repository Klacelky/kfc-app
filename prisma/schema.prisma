// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("APP_DATABASE_URL")
}

// Tournaments

enum StatsPublished {
    NOW
    AFTER
    NEVER
}

model Tournament {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name           String
    slug           String         @unique
    startDate      DateTime
    endDate        DateTime
    description    String
    publishedAt    DateTime?
    statsPublished StatsPublished

    teams  Team[]
    groups Group[]
}

// Players

model Player {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String  @default("")
    photo       String?

    teams Team[]
}

// Teams

model Team {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    abbrev      String
    description String @default("")

    tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId String
    players      Player[]
    group        GroupTeam?

    @@unique([abbrev, tournamentId])
}

// Groups

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    slug        String
    description String @default("")

    tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
    tournamentId String
    teams        GroupTeam[]

    @@unique([slug, tournamentId])
}

model GroupTeam {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    standing Int?

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String
    team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId  String @unique

    @@unique([groupId, standing])
}
